<%- if @results -%>
  <%= content_for :head do -%>
    <link href="<%= url_for(request.query_parameters.merge(:format => :ttl, :lang => nil, :page => @results.current_page, :only_path => false)) %>" type="text/turtle" rel="alternate" title=""/>
    <link href="<%= url_for(request.query_parameters.merge(:format => :rdf, :lang => nil, :page => @results.current_page, :only_path => false))  %>" type="application/rdf+xml" rel="alternate" title=""/>
  <%- end -%>
<%- end -%>

<h2><%= t('txt.views.search_results.header') %></h2>
<%- if @results -%>
  <div id="format_link_ttl">
    <%= url_for(request.query_parameters.merge(:format => nil, :lang => nil, :page => @results.current_page, :only_path => false)) %>
    (<%= link_to "Turtle", url_for(request.query_parameters.merge(:format => :ttl, :lang => nil, :page => @results.current_page, :only_path => false)) %>, <%= link_to "RDF/XML", url_for(request.query_parameters.merge(:format => :rdf, :lang => nil, :page => @results.current_page, :only_path => false)) %>)
  </div>
<%- end -%>

<%= form_tag(search_path(:lang => @active_language || I18n.locale), :method => :get, :class => :form, :id => 'search') do %>
  <fieldset id="typecheck">
    <ol>
      <li>
        <select name="t" class="search_type">
          <%= options_for_select Iqvoc.searchable_classes.map { |c| [c.model_name.human(:count => 2), c.name.parameterize] }, params[:t] %>
        </select>
      </li>
      <li>
        <%= select_tag :qt, options_for_select([
            [t('txt.views.search_results.exact'), 'exact'],
            [t('txt.views.search_results.contains'), 'contains'],
            [t('txt.views.search_results.ends_with'), 'ends_with'],
            [t('txt.views.search_results.begins_with'), 'begins_with']
          ], params[:qt]) %>
      </li>
    </ol>
  </fieldset>

  <fieldset>
    <ol>
      <li>
        <label for="q"><%= t('txt.views.search_results.search_term') %></label>
        <% if Iqvoc.searchable_classes.detect {|c| c.supports_multi_query? } %>
          <%= text_area_tag :q, params[:query] %>
        <% else %>
          <%= text_field_tag :q, params[:query] %>
        <% end %>
      </li>
      <li>
        <label for"c"><%= Collection::Base.model_name.human %></label>
        <%= select_tag 'c', options_for_select(Collection::Base.all.sort{ |a, b| a.localized_note <=> b.localized_note}.map {|c| [c.localized_note, c.origin] }, params[:c]), :include_blank => true %>
      </li>
      <li>
        <label><%= t('txt.views.search_results.search_languages') %>:</label>
        <% @available_languages.sort.each do |lang_tag, label| %>
          <%= check_box_tag "l[]", lang_tag, select_search_checkbox?(lang_tag), :id => "languages_#{lang_tag}", :class => 'lang_check' %>
          <label for="languages_<%= lang_tag %>"><%= label %></label>
        <% end %>
        <button type="button" id="language_select_all">
          <%= t('txt.views.search_results.all') %>
        </button>
        <button type="button" id="language_select_none">
          <%= t('txt.views.search_results.none') %>
        </button>
      </li>
      <li>
        <%= submit_tag t('txt.views.search_results.submit') %>
      </li>
    </ol>
  </fieldset>
<% end %>

<% if @results %>
  <h3><%= t('txt.views.search_results.search_results') %> (<%= @results.total_entries %>)</h3>

  <dl id="search_results">
    <%= render :partial => @klass.search_result_partial_name, :collection => @results %>
  </dl>

  <%= will_paginate @results, :previous_label => t("txt.common.pagination.previous"), :next_label => t("txt.common.pagination.next") unless @multi_query %>
<% end %>

<%= content_for :sub_navigation do %>
<% end %>
